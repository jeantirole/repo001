##############

LINUX 기본 언어 

// 상위폴더 

pwd

cd

ls

cp

mv

mkdir

rm

touch
<- 빈파일 만들기 

cat 

<- 파일 열어보기 
touch VS cat 

help VS man 



##############

ubunto 설치메뉴얼 

1. Oracle VM Virtual BOX 다운로드 

2. Oracle Extension 확장팩 다운로드 

3. Ubunto 다운로드 및 설치 

4. Ubuntu -20.04.iso 다운로드 

==============

1. VM 에서 Ubunto 가상환경 생성(RAM 2GB, Hard 20GB 할당) 

2. -20.04 iso 마운트 후 설치 


==============

1. apt-get update 

2. sudo apt-cache search gtop

3. sudo apt-get install htop
   (sudo yum install htop) 


F10 누르면 빠져나가기 

4. sudo apt-get  --> apt-get의 사용법 확인 


==============

Bike Sharing Demand Dataset 다운로드 

firefox 로 열기 

link 주소 복사 

wget [링크주소] 

Unzip 



==============

장치

내컴퓨터와 가상머신간 클립보드 공유

A. -장치 - 게스트 CD 이미지 삽입 

B. 

==============

꺽쇠 > 기호 사용 

내용을 파일로 저장(새로생성) 


꺽쇠 >> 기호 사용 

#내용을 파일에 저장(추가저장) 


#결과를 다음 스탭으로 넘겨주고 

rm --help | grep rm 

| => 파이프라인이라고 부름. 


#sort 라는 단어가 들어가 있는 행을 찾아서 보여줌

ls --help | grep sort 


#반복명령 수행 

mkdir test1; cd test1; touch tt.txt; ls-ls


#에러내용 파일로 저장하기 

rm r1.txt 1>result.txt
rm r2.txt 2>error.log 

cat error.log 

rm rename2.txt 1>result.txt 2>error.log




#선생님 건강 돌보면서 하시길 바랍니다.. 

nano 파일명 # 쉘 스크립트 파일명 지정 및 작성 

chmod +x mk.sh # 쉘 스크립트 변환 

./파일명 # 쉘 스크립트 실행 

ls -l # 실행확인


Ctrl + z 누르면 명령창 back 




# Redirection 익숙해지기 

cat > helloworld.txt 

내용쓰기 ; Ctrl + z 

=> 쓴 내용이 helloworld.txt 에 저장됨 


cat helloworld.txt 



# Term Summary  

Linux < Shell < Kernel 

Shell exist to control kernel in Linux 

[Work-Automation] is easy if you could use [Shell Script]  


# OS

Linux 의 제품군이 cent-os 종류의 경우 zsh의 설치는 아래와 같은 명령어( yum) 으로

해결이 가능하다. 

sudo yum install zsh 


# Bash 와 Zsh 의 차이 

cd +[tab]


* Bash 의 경우에는 명령어와 명령어 사이의 공백이 문법상 중요하다. 

=======================


nano shell1 
-------
touch a.log b.log c.log
mkdir bak
cp *.log bak 
ls -l bak 
-------
chmod _x shell1
./shell1 


*.log => 모든파일.log 를 찾아낸다. 

=======================


#!/bin/bash 
DIRNAME="./bak"
if [!-d"$DIRNAME"];then
	mkdir"$DIRNAME" 
fi 




=======================

Group Owner Other

3     3     3  

1) rwx   rwx   rwx

2) ---   rwx   ---

2) ---   rwx   r 


(* case numbering 1,2,3) 


Case1) Everybody can control the file. 

Case2) Only the owner can control the file.

Case3) Case2 + Other memeber only can read the file. 


if a file "A" exists, you would give someone a right to contrl the file ,, 

read, write, [실행] 



========================
chmod +x 



rwx 중에 x 의 권한이 추가됨. 

chmod +x backup.sh 

권한 추가 

chmod -x backup.sh





./backup.sh 

gedit 

========================


Bash Script Sample 
========================


Example 1) 

$echo "Hello World" 

$nano First.sh 

#!/bin/bash
echo "Hello World" 

$bash First.sh 
or
$chmod a+x First.sh => color change if you have a transaction right. 
$./First.sh 



Example 2) Use of comment 

‘#’ symbol is used to add single line comment in bash script

#!/bin/bash

#Add two numeric value
((sum=100+130))

#Print the result
echo $sum 


Ex 3) Use of Multi-line comment

#!/bin/bash
:
The following scrip calcul... 
;

((area=5*5))
ech $area 

bash multiline-comment.sh 

 

Ex 4) Using While Loop: 

#home/eric/test1/test1

#!/bin/bash
valid=true
count=1
while [ $valid ]
do
echo $count
if [ $count -eq 5 ];
then
break
fi
((count++))
done


Ex 5) Using if statement: 

-lt’ is used for comparison 
 For comparison, you can also use ‘-eq’ 
for equality, ‘-ne’ for not equality and 
‘-gt’ for greater than in bash script.

n=10
if [ $n -lt 10 ];
then
echo "It is a one digit number"
else
echo "It is a two digit number"
fi 


Ex 6) Using if statment with And logic: 

echo "Enter username"
read username
echo "Enter password"
read password

if [[ ( $username == "admin" && $password == "secret" ) ]]; then
echo "valid user"
else
echo "invalid user"
fi



Ex 7) Using if statement with OR logic: 

echo "Enter any number" 
read n 

if [[ ( $n -eq 15 || $n -eq 45 ) ]] 
then
echo "You won the game" 
else
echo "You lost the game" 
fi 


Ex 8) Using else if statement:

echo "Enter your lucky number"
read n

if [ $n -eq 101 ];
then
echo "You got 1st prize"
elif [ $n -eq 510 ];
then
echo "You got 2nd prize"
elif [ $n -eq 999 ];
then
echo "You got 3rd prize"

else
echo "Sorry, try for the next time"
fi



Ex 9) Using Case Statement:

# 'case' and 'esac' is equal to 'if-elseif-else' 


echo "Enter your lucky number"
read n
case $n in
101)
echo echo "You got 1st prize" ;;
510)
echo "You got 2nd prize" ;;
999)
echo "You got 3rd prize" ;;
*)
echo "Sorry, try for the next time" ;;
esac



Ex 10) Get arguments from Command Line:  #표시 뭐지 ? 

echo "Total arguments : $#"
echo "1st Arg = $1"
echo "2nd Arg = $2" 


Ex 11) Get arguments from command line with names: 

for arg in "$@"
do
index=$(echo $arg | cut -f1 -d=)
val=$(echo $arg | cut -f2 -d=)
case $index in
X) x=$val;;

Y) y=$val;;

*)
esac
done
((result=x+y))
echo "X+Y=$result"




리눅스 bash 쉘에서 $ 표시는 일반유저의 쉘을 의미하고 # 표시는 root 유저의 쉘을 의미함

${FILES[@]} for 루프의 in 절에 골뱅이를 써주면 된다. 골뱅이는 배열의 각 요소를 뜻한다.

$@ 은 Make 자동 변수(automatic variable)로, '현재 규칙에 대한 대상'을 의미한다. Make가 실행되면, Make가 해당 변수를 대상 명칭으로 교체한다.


Ex 12) Create function with Parameters:



#!/bin/bash

Rectangle_Area() {
area=$(($1 * $2))
echo "Area is : $area"
}

Rectangle_Area 10 20



Ex 13) Make directory by checking existence:

-d’ option is used to test a particular directory is exist or not. 

#!/bin/bash
echo "Enter directory name"
read ndir
if [ -d "$ndir" ]
then
echo "Directory exist"
else
`mkdir $ndir`
echo "Directory created"
fi



Ex 14) Read a File:

#!/bin/bash
file='book.txt'
while read line; do
echo $line
done < $file


Ex 15) Delete a File:

Here, ‘-i’ option is used to get permission from the user before removing the file.

echo "Enter filename to remove"
read fn
rm -i $fn




Ex 16) Test if File Exist: 

‘-f’ option is used in the following script to test the file existence. 

filename=$1
if [ -f "$filename" ]; then
echo "File exists"
else
echo "File does not exist"
fi

transaction 

This method is functioning like this 

bash16.sh #1 #2 #3 




Ex 17) Get Parse Current Date:

Year=`date +%Y`
Month=`date +%m`
Day=`date +%d`
Hour=`date +%H`
Minute=`date +%M`
Second=`date +%S`
echo `date`
echo "Current Date is: $Day-$Month-$Year"
echo "Current Time is: $Hour:$Minute:$Second"





Ex 18) Wait Command:

echo "Wait command" &
process_id=$!

wait $process_id
echo "Exited with status $?"


if there is no process id or job id 
wait for all current child process complete 

If not
does not wait child process 



$?
프로그램의 종료값을 저장하고있다.
이전의 상태를 나타내는 쉘스크립트에서 쓰이는 특수문자 


$!
가장 최근에 실행 된 백그라운드 파이프 라인의 프로세스 ID를 포함합니다.


$ sleep 60 & [1] 6238

$ echo "$!"
6238


#간단한 쉘 스크립트 예제 

ls -al #정상출력 될꺼고
echo $? #위에서 했던게 정상출력되면 "0" 값을 되돌려준다. 
ls -8  #비정상 출력 
echo $? #위에서 했던게 비정상출력이면 "2" 값을 되돌려준다. 



sleep .5 # Waits 0.5 second.
sleep 5  # Waits 5 seconds.
sleep 5s # Waits 5 seconds.
sleep 5m # Waits 5 minutes.
sleep 5h # Waits 5 hours.
sleep 5d # Waits 5 days.



출처: https://brocess.tistory.com/84 [행복한디벨로퍼]
























